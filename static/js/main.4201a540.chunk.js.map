{"version":3,"sources":["typed/index.js","terminal/index.js","App.js","serviceWorker.js","index.js"],"names":["TypedJS","options","strings","this","props","phrase","typeSpeed","backSpeed","typed","Typed","el","destroy","style","whiteSpace","ref","React","Component","Terminal","className","title","data","defaultProps","App","state","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wVAKqBA,G,kMACE,IAGbC,EAAU,CACdC,QAHiBC,KAAKC,MAAhBC,OAINC,UAAW,IACXC,UAAW,IAGbJ,KAAKK,MAAQ,IAAIC,IAAMN,KAAKO,GAAIT,K,6CAKhCE,KAAKK,MAAMG,Y,+BAGH,IAAD,OACP,OACE,0BACEC,MAAO,CAAEC,WAAY,OACrBC,IAAK,SAAAJ,GACH,EAAKA,GAAKA,S,GAvBiBK,IAAMC,YCErCC,G,MAAW,SAAAb,GACf,OACE,kBAAC,WAAD,KACE,yBAAKc,UAAU,QACb,yBAAKA,UAAU,kBACf,yBAAKA,UAAU,qBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,qBAAf,cAA+Cd,EAAMe,QAEvD,yBAAKD,UAAU,UACb,kBAAC,EAAD,CAASb,OAAQD,EAAMgB,WAM/BH,EAASI,aAAe,CACtBF,MAAO,UACPC,KAAM,CACJ,iIASWH,QCdAK,G,iNAdbC,MAAQ,CACNlB,OAAQ,CACN,+BACA,gEAGFc,MAAO,qB,wEAIP,OAAO,kBAAC,EAAD,CAAUC,KAAMjB,KAAKoB,MAAMlB,OAAQc,MAAOhB,KAAKoB,MAAMJ,Y,GAX9CJ,IAAMC,YCMJQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4201a540.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Typed from \"typed.js\";\r\n\r\nimport \"./index.css\";\r\n\r\nexport default class TypedJS extends React.Component {\r\n  componentDidMount() {\r\n    const { phrase } = this.props;\r\n\r\n    const options = {\r\n      strings: phrase,\r\n      typeSpeed: 100,\r\n      backSpeed: 50\r\n    };\r\n\r\n    this.typed = new Typed(this.el, options);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    //destroy instance\r\n    this.typed.destroy();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <span\r\n        style={{ whiteSpace: \"pre\" }}\r\n        ref={el => {\r\n          this.el = el;\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React, { Fragment } from \"react\";\r\nimport * as PropTypes from \"prop-types\";\r\n\r\nimport TypedJS from \"../typed/index\";\r\n\r\nimport \"./index.css\";\r\n\r\nconst Terminal = props => {\r\n  return (\r\n    <Fragment>\r\n      <div className=\"menu\">\r\n        <div className=\"buttons close\"></div>\r\n        <div className=\"buttons minimize\"></div>\r\n        <div className=\"buttons zoom\"></div>\r\n        <div className=\"title text-center\">Terminal - {props.title}</div>\r\n      </div>\r\n      <div className=\"screen\">\r\n        <TypedJS phrase={props.data} />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nTerminal.defaultProps = {\r\n  title: \"Strange\",\r\n  data: [\r\n    \"<b style='color: red'>You need to pass the String Array</b>\\n`<span style='color: blue; font-size= 6px'>Try again...</span>`\"\r\n  ]\r\n};\r\n\r\nTerminal.propTypes = {\r\n  title: PropTypes.string,\r\n  data: PropTypes.array\r\n};\r\n\r\nexport default Terminal;\r\n","import React from \"react\";\r\n\r\nimport Terminal from \"./terminal\";\r\n\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    phrase: [\r\n      \"Hello. I'm Dalcy Fabrício\",\r\n      \"Hello. I'm <span style='color: red'>Dalcy Fabrício</span>\"\r\n    ],\r\n\r\n    title: \"Dalcy Fabrício\"\r\n  };\r\n\r\n  render() {\r\n    return <Terminal data={this.state.phrase} title={this.state.title} />;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}